function [rx_data] = OFDM_rx(parameters,timeDomain_data)
    
    rx_buffer = zeros(parameters.number_subcarriers, parameters.number_symbols);
    sampling_frequency = parameters.fft_size * parameters.subcarrier_spacing;
    sampling_period= sampling_frequency^-1;
    cyclicPrefix_length=ceil(parameters.cyclicPrefix_us/sampling_period);
    symbol_length = parameters.fft_size + cyclicPrefix_length;
    
    pilot_interval = round(parameters.number_subcarriers/parameters.pilot_tones)-mod(parameters.number_subcarriers,parameters.pilot_tones);
    pilot_interval_index=[1:pilot_interval:parameters.number_subcarriers];
    
    timeDomain_data=reshape(timeDomain_data,parameters.fft_size+cyclicPrefix_length,[]);
    timeDomain_data=timeDomain_data(cyclicPrefix_length+1:end,:);
    frequency_symbols = fft(timeDomain_data);
    for k = 1: parameters.number_symbols
        
        rx_out = zeros(parameters.number_subcarriers, 1);
        rx_out(1:parameters.number_subcarriers/2) = frequency_symbols(end - parameters.number_subcarriers/2 + 1:end,k);
        rx_out(parameters.number_subcarriers/2+1:end) = frequency_symbols(2:parameters.number_subcarriers/2+1,k);
        rx_buffer(:,k) = rx_out;
    end
    
    % channel estimation needs to be insertet before phase tracking and CFO
    % estimation
    
    % Method 1
    % we can use the H function returned from the multi_rayleigh function 
    % the question is how.
    
    % add one more parameter for the function - the channel from multi
    % function
    % data=data3(data(1:end),:)./H;
    
    
    % Method 2
    % second method - to extract another H like in the Physical example
    % using the pilot tones
    % the same as in Physi
    
    if(parameters.use_phase_and_CFO == 1)
        rx_buffer = OFDM_phase_tracking(parameters.number_subcarriers,parameters.number_symbols,pilot_interval_index(1:end), ...
                                        rx_buffer,parameters);
                                    
        rx_buffer = OFDM_estimate_CFO(parameters,rx_buffer,pilot_interval_index(1:end));                            
        
    end
    
   
    
    %eliminate pilot frequencies
    rx_buffer(pilot_interval_index(1:end),:) = [];
     
    rx_data=reshape(rx_buffer,[],1);%parallel to serial conversion;
    
    
   
end